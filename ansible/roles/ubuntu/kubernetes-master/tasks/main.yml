---

- name: Ensure that user manifests directory exists
  file:
    path: "{{ kubernetes_user_manifests_path }}/kubernetes"
    state: directory
    recurse: yes
  tags: [init, cni]

- name: Apply kubelet RBAC
  block:
    - name: Copy RBAC role and role binding for standalone kubelet (for windows nodes)
      copy:
        src: kube-proxy-node-rbac.yml
        dest: "{{ kubernetes_user_manifests_path }}/kube-proxy-node-rbac.yml"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_real_group_id }}"

    - name: Apply RBAC for standalone kubelet
      shell: kubectl apply -f kube-proxy-node-rbac.yml
      args:
        chdir: "{{ kubernetes_user_manifests_path }}"
      register: apply_kubelet_rbac_state

    - debug: msg={{ apply_kubelet_rbac_state.stdout_lines }}

    - debug: msg={{ apply_kubelet_rbac_state.stderr_lines }}
  tags: init

- name: Apply kube-proxy nodeselector
  block:
    - name: Copy kube-proxy daemonset nodeselector patch
      copy:
        src: nodeselector-os-linux-patch.json
        dest: "{{ kubernetes_user_manifests_path }}/nodeselector-os-linux-patch.json"

    # Due to https://github.com/kubernetes/kubernetes/issues/58212 we cannot rely on exit code for "kubectl patch"
    - name: Check current nodeselector for kube-proxy daemonset
      shell: kubectl get ds kube-proxy --namespace=kube-system -o jsonpath='{.spec.template.spec.nodeSelector.beta\.kubernetes\.io/os}'
      register: current_kube_proxy_state

    - name: Apply nodeselector patch for kube-proxy daemonset
      shell: kubectl patch ds kube-proxy --namespace=kube-system --type=strategic -p "$(cat nodeselector-os-linux-patch.json)"
      args:
        chdir: "{{ kubernetes_user_manifests_path }}"
      register: patch_kube_proxy_state
      when: current_kube_proxy_state.stdout | trim | lower != "linux"

    - debug: msg={{ patch_kube_proxy_state.stdout_lines }}
      when: patch_kube_proxy_state is not skipped

    - debug: msg={{ patch_kube_proxy_state.stderr_lines }}
      when: patch_kube_proxy_state is not skipped
  tags: init

- name: Apply kube-flannel nodeselector
  block:
    - name: Copy kube-flannel daemonset nodeselector patch
      copy:
        src: nodeselector-os-linux-patch.json
        dest: "{{ kubernetes_user_manifests_path }}/nodeselector-os-linux-patch.json"

    # Due to https://github.com/kubernetes/kubernetes/issues/58212 we cannot rely on exit code for "kubectl patch"
    - name: Check current nodeselector for kube-flannel daemonset
      shell: kubectl get ds kube-flannel --namespace=kube-system -o jsonpath='{.spec.template.spec.nodeSelector.beta\.kubernetes\.io/os}'
      register: current_kube_flannel_state

    - name: Apply nodeselector patch for kube-flannel daemonset
      shell: kubectl patch ds kube-flannel --namespace=kube-system --type=strategic -p "$(cat nodeselector-os-linux-patch.json)"
      args:
        chdir: "{{ kubernetes_user_manifests_path }}"
      register: patch_kube_flannel_state
      when: current_kube_flannel_state.stdout | trim | lower != "linux"

    - debug: msg={{ patch_kube_flannel_state.stdout_lines }}
      when: patch_kube_flannel_state is not skipped

    - debug: msg={{ patch_kube_flannel_state.stderr_lines }}
      when: patch_kube_flannel_state is not skipped
  when: kube_network_plugin == 'flannel'
  tags: init

- name: Apply calico-node nodeselector
  block:
    - name: Copy calico-node daemonset nodeselector patch
      copy:
        src: nodeselector-os-linux-patch.json
        dest: "{{ kubernetes_user_manifests_path }}/nodeselector-os-linux-patch.json"

    # Due to https://github.com/kubernetes/kubernetes/issues/58212 we cannot rely on exit code for "kubectl patch"
    - name: Check current nodeselector for calico-node daemonset
      shell: kubectl get ds calico-node --namespace=kube-system -o jsonpath='{.spec.template.spec.nodeSelector.beta\.kubernetes\.io/os}'
      register: current_kube_calico_state

    - name: Apply nodeselector patch for calico-node daemonset
      shell: kubectl patch ds calico-node --namespace=kube-system --type=strategic -p "$(cat nodeselector-os-linux-patch.json)"
      args:
        chdir: "{{ kubernetes_user_manifests_path }}"
      register: patch_kube_calico_state
      when: current_kube_calico_state.stdout | trim | lower != "linux"

    - debug: msg={{ patch_kube_calico_state.stdout_lines }}
      when: patch_kube_calico_state is not skipped

    - debug: msg={{ patch_kube_calico_state.stderr_lines }}
      when: patch_kube_calico_state is not skipped
  when: kube_network_plugin == 'calico'
  tags: init

