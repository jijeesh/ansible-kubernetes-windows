---
- name: Ensure that download temporary CNI directory exists
  win_file:
    path: "{{ download_temp_path }}"
    state: directory
    recurse: yes
  tags: cni

- name: force remove current download version - force reinstall
  win_file:
    path: "{{ download_temp_path }}/{{ cni_package_file }}"
    state: absent
  when: cni_force_reinstall

- name: check if cni file is downloaded
  win_stat:
    path: "{{ download_temp_path }}/{{ cni_package_file }}"
  register: cni_stat_package_file_info

# Download with win_get_url will fail if CPU is 100% with other processes
- name: Download CNI package with host-gw and flannel support on windows
  win_get_url:
    url: "{{ cni_package_url }}"
    dest: "{{ download_temp_path }}/{{ cni_package_file }}"
    force: no # url doesn't support head check
    use_proxy: no
    # validate_certs: no # only use if some error with ssl
  when: not configure_proxy and not cni_stat_package_file_info.stat.exists
  tags: cni

- name: Download CNI package with host-gw and flannel support on windows with proxy
  win_get_url:
    url: "{{ cni_package_url }}"
    dest: "{{ download_temp_path }}/{{ cni_package_file }}"
    force: yes # url doesn't support head check
    proxy_url: "{{ win_choco_proxy_url }}"
    proxy_username: "{{ win_choco_proxy_username }}"
    proxy_password: "{{ win_choco_proxy_password }}"
    timeout: 120
    use_proxy: yes
    # validate_certs: no # only use if some error with ssl
  when: configure_proxy and not cni_stat_package_file_info.stat.exists
  tags: cni

- name: Ensure that unzip temporary directory exists
  win_file:
    path: "{{ unzip_temp_path }}"
    state: directory
    recurse: yes
  tags: cni

# PSCX clashes with docker installation scripts, so it is undesireable.
# In addition, unzipping tar.gz on windows host is rather clumsy. Another option is to use 7zip directly as in: https://stackoverflow.com/questions/1359793/programmatically-extract-tar-gz-in-a-single-step-on-windows-with-7zip
#- name: Install PSCX in order to use win_unzip module and tar.gz
#  win_psmodule:
#    name: Pscx
#    allow_clobber: yes
#    state: present
#    
# Example how to use win_unzip for tar.gz (rather not a simple flow, should be fixed in win_unzip plugin)
#- name: Unzip CNI gz package 
#  win_unzip:
#    src: "{{ download_temp_path }}/cni.tar.gz"
#    dest: "{{ download_temp_path }}"
#    delete_archive: yes
#
#- name: Find tar package with CNI
#  win_find:
#    paths: "{{ download_temp_path }}"
#    patterns: ["*.tar"]
#  register: cni_find_state
#
#- name: Unzip CNI tar package 
#  win_unzip:
#    src: "{{ item.path }}"
#    dest: "{{ unzip_temp_path }}"
#    delete_archive: yes
#  with_items: "{{ cni_find_state.files }}"

- name: Unzip CNI package
  win_shell: 7z x "{{ download_temp_path }}/{{ cni_package_file }}" -so | 7z x -aoa -si -ttar -o"{{ unzip_temp_path }}"
  args:
    executable: cmd  # Required as powershell provides unwanted buffering
  when: not cni_stat_package_file_info.stat.exists # only if new version is downloaded
  tags: cni

- name: Ensure that CNI installation directory exists
  win_file:
    path: "{{ cni_installation_path }}"
    state: directory
    recurse: yes
  when: not cni_stat_package_file_info.stat.exists # only if new version is downloaded
  tags: cni
    
- name: Copy CNI plugins to destination directory
  win_copy:
    remote_src: yes
    src: "{{ unzip_temp_path }}/windows/"
    dest: "{{ cni_installation_path }}"
  when: not cni_stat_package_file_info.stat.exists # only if new version is downloaded
  tags: cni

- name: Ensure that CNI config directory exists
  win_file:
    path: "{{ cni_config_path }}"
    state: directory
    recurse: yes
  tags: cni

- name: Copy CNI configuration file
  win_template:
    src: cni-conf.json.j2
    dest: "{{ cni_config_path }}/cni-conf.json"
  tags: cni
