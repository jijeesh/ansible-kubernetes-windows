---
- name: Ensure that any old instance of flanneld is stopped
  win_service:
    name: flanneld
    state: stopped
    force_dependent_services: yes
  ignore_errors: yes
  tags: cni

# Temporal workaround until we do find correct rules
- name: Ensure that Windows Firewall is stopped
  win_service:
    name: mpssvc
    state: stopped
    force_dependent_services: yes
    start_mode: disabled
  ignore_errors: yes
  when: win_disable_firewall
  tags: cni

- name: Ensure that download temporary kubernetes directory exists
  win_file:
    path: "{{ download_temp_path }}"
    state: directory
    recurse: yes
  tags: cni

- name: check if cni file is downloaded
  win_stat:
    path: "{{ download_temp_path }}/{{ flannel_package_file }}"
  register: flannel_stat_package_file_info

- name: Download flannel package with host-gw support
  win_get_url:
    url: "{{ flannel_package_url }}"
    dest: "{{ download_temp_path }}/{{ flannel_package_file }}"
    force: yes
  when: not flannel_stat_package_file_info.stat.exists
  tags: cni

- name: Ensure that unzip temporary directory exists
  win_file:
    path: "{{ unzip_temp_path }}"
    state: directory
    recurse: yes
  tags: cni

# Unzipping tar.gz on windows host is rather clumsy. Another option is to use 7zip directly as in: https://stackoverflow.com/questions/1359793/programmatically-extract-tar-gz-in-a-single-step-on-windows-with-7zip
#- name: Unzip flannel gz package 
#  win_unzip:
#    src: "{{ download_temp_path }}/{{ flannel_package_file }}"
#    dest: "{{ download_temp_path }}"
#    delete_archive: yes
#
#- name: Find tar package with flannel
#  win_find:
#    paths: "{{ download_temp_path }}"
#    patterns: ["*.tar"]
#  register: flannel_find_state
#
#- name: Unzip flannel tar package 
#  win_unzip:
#    src: "{{ item.path }}"
#    dest: "{{ unzip_temp_path }}"
#    delete_archive: yes
#  with_items: "{{ flannel_find_state.files }}"

- name: Unzip flannel package
  win_shell: 7z x "{{ download_temp_path }}/{{ flannel_package_file }}" -so | 7z x -aoa -si -ttar -o"{{ unzip_temp_path }}"
  args:
    executable: cmd  # Required as powershell provides unwanted buffering
  when: not flannel_stat_package_file_info.stat.exists
  tags: cni

- name: Ensure that flannel installation directory exists
  win_file:
    path: "{{ flannel_installation_path }}"
    state: directory
    recurse: yes
  tags: cni
    
- name: Copy flannel to destination directory
  win_copy:
    remote_src: yes
    src: "{{ unzip_temp_path }}"
    dest: "{{ flannel_installation_path }}"
  when: not flannel_stat_package_file_info.stat.exists
  tags: cni

- name: Delete temporary unzip directory
  win_file:
    path: "{{ unzip_temp_path }}"
    state: absent
    recurse: yes
  tags: cni

- name: Ensure that flannel config directory exists
  win_file:
    path: "{{ flannel_config_path }}"
    state: directory
    recurse: yes
  tags: cni

- name: Copy flannel configuration file
  win_template:
    src: net-conf.json.j2
    dest: "{{ flannel_config_path }}/net-conf.json"
  tags: cni

- name: Ensure that flannel is in PATH environment variable
  win_path:
    elements: "{{ flannel_installation_path }}"
    scope: machine
    state: present
  tags: cni

- name: Install flannel service
  block:
    - name: Copy flannel daemon file
      win_template:
        src: flannel-daemon.ps1.j2
        dest: "{{ flannel_installation_path }}/flannel-daemon.ps1"

    - name: Ensure that flannel log directory exists
      win_file:
        path: "{{ flannel_log_path }}"
        state: directory
        recurse: yes
     
    - name: Create flannel service
      win_nssm:
        name: "{{ flannel_service_name }}"
        application: "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
        app_parameters_free_form: "-ExecutionPolicy Bypass -Noninteractive -File '{{ flannel_installation_path }}/flannel-daemon.ps1'"
        stdout_file: "{{ flannel_log_path }}/{{ flannel_service_name }}-stdout.log"
        stderr_file: "{{ flannel_log_path }}/{{ flannel_service_name }}-stderr.log"
        state: present
        start_mode: auto
        dependencies: "{{ kube_proxy_service_name }}"  # latest NSSM throws a lot of errors when used with ansible and multiple dependencies. Defining them manually below

    - name: Set flannel service restart delay for short executions
      win_shell: "nssm set {{ flannel_service_name }} AppThrottle 1500"

    - name: Set flannel service default failure action to restart
      win_shell: "nssm set {{ flannel_service_name }} AppExit Default Restart"

    - name: Set flannel service restart delay in case of failure
      win_shell: "nssm set {{ flannel_service_name }} AppRestartDelay 5000"

    - name: Set flannel service to not overwrite stdout file
      win_shell: "nssm set {{ flannel_service_name }} AppStdoutCreationDisposition 4"

    - name: Set flannel service to not overwrite stderr file
      win_shell: "nssm set {{ flannel_service_name }} AppStderrCreationDisposition 4"

    #- name: Set flannel service dependency on docker
    #  win_shell: "nssm set {{ flannel_service_name }} DependOnService :Docker"

    #- name: Set flannel service dependency on kubelet
    #  win_shell: "nssm set {{ flannel_service_name }} DependOnService +kubelet"
    #- name: Set flannel service dependency on kubelet
    #  win_shell: "nssm set {{ flannel_service_name }} DependOnService +kube-proxy"      
  tags: cni