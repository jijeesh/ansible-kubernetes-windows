---
- name: Install Hyper-V with management tools
  win_shell: Install-WindowsFeature -Name Hyper-V -IncludeManagementTools -IncludeAllSubFeature
  when: win_docker_enable_hyperv

- name: Set linux containers on windows mode
  win_environment:
    state: "{{ 'present' if enable_linux_containers_on_windows else 'absent' }}"
    name: LCOW_SUPPORTED
    value: 1
    level: machine

- name: Check if docker is already installed
  win_shell: (Get-Package -Name Docker -ProviderName {{ win_docker_provider }}).Version
  ignore_errors: yes
  changed_when: false
  register: check_docker_package_state

- block:
  # Installation docker steps
  # also applies workaround https://github.com/OneGet/MicrosoftDockerProvider/issues/15#issuecomment-269219021

  - name: Install required version of NuGet Package Provider
    win_shell: Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force

  - name: Install Docker PackageManagement Provider (official from Docker, not Msft)
    win_shell: Install-Module DockerProvider -Force
    when: win_docker_provider == 'DockerProvider'

  - name: prepare msft directory to download files
    win_file:
      path: "{{ win_docker_temp_dir }}"
      state: directory
    when: win_docker_provider == 'DockerMsftProvider'

#  - name: Download docker zip file from msft with proxy
#    win_get_url:
#      url: "https://dockermsft.blob.core.windows.net/dockercontainer/{{ win_docker_zip_filename }}"
#      dest: "{{ win_docker_zip_file }}"
#      proxy_url: "{{ win_choco_proxy_url }}"
#      proxy_username: "{{ win_choco_proxy_username }}"
#      proxy_password: "{{ win_choco_proxy_password }}"
#    when: win_docker_provider == 'DockerMsftProvider' and configure_proxy

#  - name: Download docker zip file from msft without proxy
#    win_get_url:
#      url: "https://dockermsft.blob.core.windows.net/dockercontainer/{{ win_docker_zip_filename }}"
#      dest: "{{ win_docker_zip_file }}"
#    when: win_docker_provider == 'DockerMsftProvider' and not configure_proxy

#  - name: Get-Filehash for downloaded docker version
#    win_shell: Get-FileHash -Path {{ win_docker_zip_file }} -Algorithm SHA256
#    changed_when: false
#    when: win_docker_provider == 'DockerMsftProvider'

  - name: Install docker
    win_shell: Install-Package Docker -ProviderName {{ win_docker_provider }} -Force -RequiredVersion "{{ win_docker_version }}"
    when: win_docker_provider == 'DockerProvider'
    register: install_docker_package_state

  # I had to perform the installation in this way to have it installed properly
  # Run with fixes for https://github.com/OneGet/MicrosoftDockerProvider/issues/15
  # TODO: Add step to install with proxy
  - name: Install docker from msft
    script: install_docker_msft.ps1 -RequiredVersion "{{ win_docker_version }}" -ZipNameVersion "{{ win_docker_zip_filename }}"
    when: win_docker_provider == 'DockerMsftProvider'
    register: install_docker_package_state

  when: check_docker_package_state is failed or check_docker_package_state.stdout | trim != win_docker_version

- name: Reboot after docker installation
  win_reboot:
    reboot_timeout: 3600
    post_reboot_delay: 180
  when: install_docker_package_state is changed

- name: Ensure that docker service is started properly
  win_service:
    name: docker
    start_mode: auto
    state: started

- name: Install docker service watcher
  block:
  - name: Copy docker service watcher daemon file
    win_copy:
      src: docker-service-watcher-daemon.ps1
      dest: "{{ docker_service_watcher_daemon_path }}"

  - name: Ensure that watcher log directory exists
    win_file:
      path: "{{ docker_service_watcher_log_path }}"
      state: directory
      recurse: yes
   
  - name: Create watcher service
    win_nssm:
      name: "{{ docker_service_watcher_service_name }}"
      application: "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
      app_parameters_free_form: "-ExecutionPolicy Bypass -Noninteractive -File '{{ docker_service_watcher_daemon_path }}'"
      stdout_file: "{{ docker_service_watcher_log_path }}/{{ docker_service_watcher_service_name }}-stdout.log"
      stderr_file: "{{ docker_service_watcher_log_path }}/{{ docker_service_watcher_service_name }}-stderr.log"
      state: present
      start_mode: auto

  - name: Set service restart delay for short executions
    win_shell: "nssm set {{ docker_service_watcher_service_name }} AppThrottle 1500"

  - name: Set service default failure action to restart
    win_shell: "nssm set {{ docker_service_watcher_service_name }} AppExit Default Restart"

  - name: Set service restart delay in case of failure
    win_shell: "nssm set {{ docker_service_watcher_service_name }} AppRestartDelay 1000"

  - name: Set service to not overwrite stdout file
    win_shell: "nssm set {{ docker_service_watcher_service_name }} AppStdoutCreationDisposition 4"

  - name: Set service to not overwrite stderr file
    win_shell: "nssm set {{ docker_service_watcher_service_name }} AppStdoutCreationDisposition 4"

  - name: Start watcher service
    win_service:
      name: "{{ docker_service_watcher_service_name }}"
      state: started

- name: Pull windowsservercore base image from Docker Hub
  win_shell: docker pull {{ docker_windowsservercore_image }}
  when: win_docker_pull_images

- name: Tag selected windowsservercore base image as latest
  win_shell: docker tag {{ docker_windowsservercore_image }} microsoft/windowsservercore:latest
  when: win_docker_pull_images

- name: Pull nanoserver base image from Docker Hub
  win_shell: docker pull {{ docker_nanoserver_image }}
  when: win_docker_pull_images

- name: Tag selected nanoserver base image as latest
  win_shell: docker tag {{ docker_nanoserver_image }} microsoft/nanoserver:latest
  when: win_docker_pull_images
